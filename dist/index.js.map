{
  "version": 3,
  "sources": ["../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name assert\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/number/float64/base/assert}\n*/\nsetReadOnly( ns, 'assert', require( '@stdlib/number-float64-base-assert' ) );\n\n/**\n* @name exponent\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/exponent}\n*/\nsetReadOnly( ns, 'exponent', require( '@stdlib/number-float64-base-exponent' ) );\n\n/**\n* @name fromBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-binary-string}\n*/\nsetReadOnly( ns, 'fromBinaryString', require( '@stdlib/number-float64-base-from-binary-string' ) );\n\n/**\n* @name fromInt64Bytes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-int64-bytes}\n*/\nsetReadOnly( ns, 'fromInt64Bytes', require( '@stdlib/number-float64-base-from-int64-bytes' ) );\n\n/**\n* @name fromWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/from-words}\n*/\nsetReadOnly( ns, 'fromWords', require( '@stdlib/number-float64-base-from-words' ) );\n\n/**\n* @name getHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-high-word}\n*/\nsetReadOnly( ns, 'getHighWord', require( '@stdlib/number-float64-base-get-high-word' ) );\n\n/**\n* @name getLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/get-low-word}\n*/\nsetReadOnly( ns, 'getLowWord', require( '@stdlib/number-float64-base-get-low-word' ) );\n\n/**\n* @name normalize\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/normalize}\n*/\nsetReadOnly( ns, 'normalize', require( '@stdlib/number-float64-base-normalize' ) );\n\n/**\n* @name setHighWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-high-word}\n*/\nsetReadOnly( ns, 'setHighWord', require( '@stdlib/number-float64-base-set-high-word' ) );\n\n/**\n* @name setLowWord\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/set-low-word}\n*/\nsetReadOnly( ns, 'setLowWord', require( '@stdlib/number-float64-base-set-low-word' ) );\n\n/**\n* @name signbit\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/signbit}\n*/\nsetReadOnly( ns, 'signbit', require( '@stdlib/number-float64-base-signbit' ) );\n\n/**\n* @name toBinaryString\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-binary-string}\n*/\nsetReadOnly( ns, 'toBinaryString', require( '@stdlib/number-float64-base-to-binary-string' ) );\n\n/**\n* @name float64ToFloat32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-float32}\n*/\nsetReadOnly( ns, 'float64ToFloat32', require( '@stdlib/number-float64-base-to-float32' ) );\n\n/**\n* @name float64ToInt32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int32}\n*/\nsetReadOnly( ns, 'float64ToInt32', require( '@stdlib/number-float64-base-to-int32' ) );\n\n/**\n* @name float64ToInt64Bytes\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-int64-bytes}\n*/\nsetReadOnly( ns, 'float64ToInt64Bytes', require( '@stdlib/number-float64-base-to-int64-bytes' ) );\n\n/**\n* @name float64ToUint32\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-uint32}\n*/\nsetReadOnly( ns, 'float64ToUint32', require( '@stdlib/number-float64-base-to-uint32' ) );\n\n/**\n* @name toWords\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/number/float64/base/to-words}\n*/\nsetReadOnly( ns, 'toWords', require( '@stdlib/number-float64-base-to-words' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "aA0BA,IAAIA,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,SAAU,QAAS,oCAAqC,CAAE,EAS3ED,EAAaC,EAAI,WAAY,QAAS,sCAAuC,CAAE,EAS/ED,EAAaC,EAAI,mBAAoB,QAAS,gDAAiD,CAAE,EASjGD,EAAaC,EAAI,iBAAkB,QAAS,8CAA+C,CAAE,EAS7FD,EAAaC,EAAI,YAAa,QAAS,wCAAyC,CAAE,EASlFD,EAAaC,EAAI,cAAe,QAAS,2CAA4C,CAAE,EASvFD,EAAaC,EAAI,aAAc,QAAS,0CAA2C,CAAE,EASrFD,EAAaC,EAAI,YAAa,QAAS,uCAAwC,CAAE,EASjFD,EAAaC,EAAI,cAAe,QAAS,2CAA4C,CAAE,EASvFD,EAAaC,EAAI,aAAc,QAAS,0CAA2C,CAAE,EASrFD,EAAaC,EAAI,UAAW,QAAS,qCAAsC,CAAE,EAS7ED,EAAaC,EAAI,iBAAkB,QAAS,8CAA+C,CAAE,EAS7FD,EAAaC,EAAI,mBAAoB,QAAS,wCAAyC,CAAE,EASzFD,EAAaC,EAAI,iBAAkB,QAAS,sCAAuC,CAAE,EASrFD,EAAaC,EAAI,sBAAuB,QAAS,4CAA6C,CAAE,EAShGD,EAAaC,EAAI,kBAAmB,QAAS,uCAAwC,CAAE,EASvFD,EAAaC,EAAI,UAAW,QAAS,sCAAuC,CAAE,EAK9E,OAAO,QAAUA",
  "names": ["setReadOnly", "ns"]
}
